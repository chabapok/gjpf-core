//
// Copyright (C) 2014 United States Government as represented by the
// Administrator of the National Aeronautics and Space Administration
// (NASA).  All Rights Reserved.
//
// This software is distributed under the NASA Open Source Agreement
// (NOSA), version 1.3.  The NOSA has been approved by the Open Source
// Initiative.  See the file NOSA-1.3-JPF at the top of the distribution
// directory tree for the complete NOSA document.
//
// THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY WARRANTY OF ANY
// KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING, BUT NOT
// LIMITED TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL CONFORM TO
// SPECIFICATIONS, ANY IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR
// A PARTICULAR PURPOSE, OR FREEDOM FROM INFRINGEMENT, ANY WARRANTY THAT
// THE SUBJECT SOFTWARE WILL BE ERROR FREE, OR ANY WARRANTY THAT
// DOCUMENTATION, IF PROVIDED, WILL CONFORM TO THE SUBJECT SOFTWARE.
//

package gov.nasa.jpf.vm;

import gov.nasa.jpf.Config;
import gov.nasa.jpf.JPF;
import gov.nasa.jpf.annotation.MJI;
import gov.nasa.jpf.util.JPFLogger;
import gov.nasa.jpf.util.script.Event;
import gov.nasa.jpf.util.script.EventGenerator;
import gov.nasa.jpf.util.script.EventTree;

/**
 * native peer for EventProducer
 */
public class JPF_gov_nasa_jpf_EventProducer extends NativePeer {

  static final String CG_NAME = "generateNextEvent";
  
  public static JPFLogger log = JPF.getLogger("event");
  
  protected EventTree eventTree;
  protected Event event;
  
  public JPF_gov_nasa_jpf_EventProducer (Config config){
    eventTree = config.getEssentialInstance("event.class", EventTree.class);
    logger.info("event tree generated by: ", eventTree.getClass().getName());
  }
  
  protected void processEvent (){
    // nothing here, to be overridden in case processing has to happen in the native peer
    // this is only called from within generateNextEvent()
  }
  
  @MJI
  public boolean generateNextEvent____Z (MJIEnv env, int objRef){
    ThreadInfo ti = env.getThreadInfo();
    SystemState ss = env.getSystemState();
    EventGenerator cg;

    event = null;
    
    if (!ti.isFirstStepInsn()){      
      EventGenerator cgPrev = ss.getLastChoiceGeneratorOfType(EventGenerator.class);
      if (cgPrev != null){
        cg = cgPrev.getSuccessor(CG_NAME);        
      } else {
        cg = new EventGenerator( CG_NAME, eventTree.getRoot());
      }
      
      if (cg != null){
        if (log.isInfoLogged()){
          log.info("next event generator: ", cg.toString());
        }
        ss.setNextChoiceGenerator(cg);
        env.repeatInvocation();
        return true; // does not matter
        
      } else {
        log.info("no more events");        
        return false;
      }
      
    } else { // re-execution
      cg = ss.getCurrentChoiceGenerator(CG_NAME, EventGenerator.class);
      event = cg.getNextChoice();
      if (log.isInfoLogged()){
        log.info("processing event: ", event.toString());
      }
      processEvent();
      return true;
    }
  }
  
  @MJI
  public int getEventName____Ljava_lang_String_2 (MJIEnv env, int objRef){
    if (event != null){
      return env.newString( event.getName());
    } else {
      return MJIEnv.NULL;
    }
  }

  //--- for testing and debugging purposes (requires special EventTree implementations e.g. derived from TestEventTree)
  // <2do> should be moved to subclass
  
  @MJI
  public boolean checkTrace____Z (MJIEnv env, int objRef){
    SystemState ss = env.getSystemState();
    EventGenerator cg = ss.getLastChoiceGeneratorOfType(EventGenerator.class);

    if (cg != null){
      Event lastEvent = cg.getNextChoice();      
      if (eventTree.checkTrace(lastEvent)){
        return true;
      } else {
        log.warning("trace check for event ", lastEvent.toString(), " failed");
        return false;
      }
      
    } else {
      return false; // there should have been one
    }
  }
  
  @MJI
  public boolean isCompletelyCovered____Z (MJIEnv env, int objRef){
    return eventTree.isCompletelyCovered();
  }
}
