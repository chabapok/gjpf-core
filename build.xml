<?xml version="1.0" ?>

<!--
  build.xml - the JPF core build script
              using Ant (http://jakarta.apache.org/ant)
  public targets:

    build (default)   compile classes and build JPF jar files
    compile           compile JPF and its specific (modeled) environment libraries
    test              run all JPF tests
    clean             remove the files that have been generated by the build process
    buildinfo         create buildinfo properties file
-->

<project name="jpf-core" default="build" basedir=".">

  <!-- ===================== ===== COMMON SECTION ========================== -->

  <!-- 
    local props have to come first, because Ant properties are immutable
    NOTE: this file is local - it is never in the repository!
  -->
  <property file="local.properties"/>

  <!-- compiler settings -->
  <property name="src_level"     value="6"/>
  <property name="debug"         value="on"/>
  <property name="deprecation"   value="on"/>

  <property name="jpf.version"   value="5.0pre2"/>


  <!-- generic classpath settings -->
  <path id="lib.path">
    <pathelement location="build/main"/>
    <pathelement location="build/peers"/>
    <pathelement location="build/annotations"/>
    <fileset dir=".">
  	  <include name="lib/*.jar"/>
    </fileset>
  </path>


  <!-- init: common initialization -->
  <target name="-init">
    <tstamp/>

    <mkdir dir="build"/>               <!-- the build root -->
    
    <!-- the things that have to be in the classpath of whatever runs Ant -->
    <available property="have_javac" classname="com.sun.tools.javac.Main"/>
    <fail unless="have_javac">no javac was found __or__ check http://babelfish.arc.nasa.gov/trac/jpf/wiki/install/build for possible solutions</fail>
    
    
    <available file="src/main"        type="dir" property="have_main"/>
    <available file="src/annotations" type="dir" property="have_annotations"/>
    <available file="src/peers"       type="dir" property="have_peers"/>
    <available file="src/classes"     type="dir" property="have_classes"/>
    <available file="src/tests"       type="dir" property="have_tests"/>
    <available file="src/examples"    type="dir" property="have_examples"/>

    <!-- for the core, it's a fail if any of these is missing -->
    <fail unless="have_main">no src/main</fail>
    <fail unless="have_annotations">no src/annotations</fail>
    <fail unless="have_peers">no src/peers</fail>
    <fail unless="have_classes">no src/classes</fail>
    <fail unless="have_tests">no src/tests</fail>
    <fail unless="have_examples">no src/examples</fail>

    <dependset>
      <srcfilelist dir="." files="build/jpf.jar"/>
      <targetfilelist dir="." files="jpf-fb-report.xml"/>
    </dependset>
    <available file="jpf-fb-report.xml" type="file" property="have_fb_report"/>

  </target>


  <!-- ======================= COMPILE SECTION ============================= -->
    
  <!-- public compile -->
  <target name="compile" depends="-init,-compile-annotations,-compile-main,-compile-peers,-compile-classes,-compile-tests,-compile-examples"
          description="compile all JPF core sources" >
  </target>

  <target name="-compile-annotations" if="have_annotations">
    <mkdir dir="build/annotations"/>
    <javac srcdir="src/annotations" destdir="build/annotations" includeantruntime="false"
           debug="${debug}" source="${src_level}" deprecation="${deprecation}" classpath=""/>
  </target>

  <target name="-compile-main" if="have_main">
    <mkdir dir="build/main"/>
    <javac srcdir="src/main" destdir="build/main" includeantruntime="false"
           debug="${debug}" source="${src_level}" deprecation="${deprecation}"
           classpathref="lib.path"/>

	  <copy file="build.properties" todir="build/main/gov/nasa/jpf" failonerror="false"/>
  </target>
  
  <target name="-compile-peers" if="have_peers" depends="-compile-main" >
    <mkdir dir="build/peers"/>
    <javac srcdir="src/peers" destdir="build/peers" includeantruntime="false"
           debug="${debug}" source="${src_level}" deprecation="${deprecation}"
           classpathref="lib.path"/>
  </target>
  
  <target name="-compile-classes" if="have_classes" depends="-compile-annotations,-compile-main" >
    <mkdir dir="build/classes"/>
    <javac srcdir="src/classes" destdir="build/classes" includeantruntime="false"
           debug="${debug}" source="${src_level}" deprecation="${deprecation}">
      <classpath>
        <path refid="lib.path"/>
        <pathelement location="build/annotations"/>
      </classpath>
    </javac>
  </target>
  
  <target name="-compile-tests" if="have_tests" depends="-compile-annotations,-compile-main">
    <mkdir dir="build/tests"/>
    <javac srcdir="src/tests" destdir="build/tests" includeantruntime="false"
           debug="${debug}" source="${src_level}" deprecation="${deprecation}"
           includes="*,gov/nasa/jpf/**">
      <classpath>
        <path refid="lib.path"/>
        <pathelement location="build/annotations"/>
      </classpath>       
    </javac>
  </target>

  <target name="-compile-examples" if="have_examples" depends="-compile-annotations,-compile-main">
    <mkdir dir="build/examples" />
    <javac srcdir="src/examples" destdir="build/examples" includeantruntime="false"
           debug="${debug}" source="${src_level}" deprecation="${deprecation}"
           classpathref="lib.path"/>
  </target>

  <!-- ======================= CHECK SECTION =============================== -->

  <target name="check" depends="build" unless="have_fb_report"
          description="run analyzers on jpf-core">
    <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask"/>

    <findbugs home="tools"
              debug="false"
              output="xml"
              jvmargs="-Xmx1024m"
              outputFile="jpf-fb-report.xml" >
      <auxClasspath path="lib/bcel.jar" />
      <sourcePath path="src/main;src/peers" />
      <class location="build/jpf.jar" />
    </findbugs>

  </target>

  <target name="show-check" depends="check"
            description="interactively browse check report">
    <java jar="tools/findbugs.jar" fork="true" spawn="true">
      <arg value="jpf-fb-report.xml"/>
    </java>
  </target>
  
  <!-- ======================= MISC SECTION ================================ -->
  
  <!-- build jars -->
  <target name="build" depends="compile"
        description="generate the core JPF jar files" >

    <jar jarfile="build/jpf.jar" index="true">
      <fileset dir="build/main"/>
      <fileset dir="build/peers"/>
      <!-- this is redundant, but if JPF is executed from java.class.path it wouldn't find annotations -->
      <fileset dir="build/annotations"/>
      
      <manifest>
        <attribute name="Built-By" value="${user.name}"/>
        <attribute name="Implementation-Vendor" value="NASA Ames Research Center"/>
        <attribute name="Implementation-Title" value="Java Pathfinder core system"/>
        <attribute name="Implementation-Version" value="${jpf.version}"/>
      </manifest>
    </jar>

    <jar jarfile="build/jpf-classes.jar">
      <fileset dir="build/classes"/>
      <fileset dir="build/annotations"/>
    </jar>

    <!-- optional jar that contains annotations to be used in non-JPF dependent apps -->
    <jar jarfile="build/jpf-annotations.jar">
      <fileset dir="build/annotations"/>
    </jar>

    <jar jarfile="build/RunJPF.jar">
      <fileset dir="build/main">
        <include name="gov/nasa/jpf/tool/Run.class"/>
        <include name="gov/nasa/jpf/tool/RunJPF.class"/>
        <include name="gov/nasa/jpf/Config.class"/>
        <include name="gov/nasa/jpf/ConfigChangeListener.class"/>
        <include name="gov/nasa/jpf/Config$MissingRequiredKeyException.class"/>
        <include name="gov/nasa/jpf/JPFClassLoader.class"/>
        <include name="gov/nasa/jpf/JPFShell.class"/>
        <include name="gov/nasa/jpf/JPFException.class"/>
        <include name="gov/nasa/jpf/JPFConfigException.class"/>
        <include name="gov/nasa/jpf/util/JPFSiteUtils.class"/>
        <include name="gov/nasa/jpf/util/FileUtils.class"/>
        <include name="gov/nasa/jpf/util/StringMatcher.class"/>

      </fileset>
      <manifest>
        <attribute name="Built-By" value="${user.name}"/>
        <attribute name="Implementation-Vendor" value="NASA Ames Research Center"/>
        <attribute name="Implementation-Title" value="Java Pathfinder core launch system"/>
        <attribute name="Implementation-Version" value="${jpf.version}"/>
        <attribute name="Main-Class" value="gov.nasa.jpf.tool.RunJPF"/>
      </manifest>
    </jar>

    <jar jarfile="build/RunTest.jar">
      <fileset dir="build/main">
        <include name="gov/nasa/jpf/tool/Run.class"/>
        <include name="gov/nasa/jpf/tool/RunTest.class"/>
        <include name="gov/nasa/jpf/tool/RunTest$Failed.class"/>
        <include name="gov/nasa/jpf/Config.class"/>
        <include name="gov/nasa/jpf/ConfigChangeListener.class"/>
        <include name="gov/nasa/jpf/Config$MissingRequiredKeyException.class"/>
        <include name="gov/nasa/jpf/JPFClassLoader.class"/>
        <include name="gov/nasa/jpf/JPFException.class"/>
        <include name="gov/nasa/jpf/JPFConfigException.class"/>
        <include name="gov/nasa/jpf/util/JPFSiteUtils.class"/>
        <include name="gov/nasa/jpf/util/FileUtils.class"/>
        <include name="gov/nasa/jpf/util/StringMatcher.class"/>
      </fileset>
      <manifest>
        <attribute name="Built-By" value="${user.name}"/>
        <attribute name="Implementation-Vendor" value="NASA Ames Research Center"/>
        <attribute name="Implementation-Title" value="Java Pathfinder test launch system"/>
        <attribute name="Implementation-Version" value="${jpf.version}"/>
        <attribute name="Main-Class" value="gov.nasa.jpf.tool.RunTest"/>
      </manifest>
    </jar>


    <jar jarfile="build/RunAnt.jar">
      <fileset dir="build/main">
        <include name="gov/nasa/jpf/tool/RunAnt.class"/>
        <include name="gov/nasa/jpf/util/JPFSiteUtils.class"/>
      </fileset>
      <manifest>
        <attribute name="Built-By" value="${user.name}"/>
        <attribute name="Implementation-Vendor" value="NASA Ames Research Center"/>
        <attribute name="Implementation-Title" value="Java Pathfinder Ant launcher"/>
        <attribute name="Implementation-Version" value="${jpf.version}"/>
        <attribute name="Main-Class" value="gov.nasa.jpf.tool.RunAnt"/>
      </manifest>
    </jar>

  </target>


  <!-- public clean: cleanup from previous tasks/builds -->
  <target name="clean"
          description="remove all build artifacts and temporary files">
    <delete file="build.properties"/>
    <delete dir="build" />
    <delete>
      <fileset dir="." includes="jpf-fb-report.*"/>
      <fileset dir="." includes="**/*~" defaultexcludes="no" />
      <fileset dir="." includes="**/*.bak" defaultexcludes="no" />
      <fileset dir="." includes="**/error.xml" />
    </delete>
  </target>


  <!-- generate buildinfo file  -->
  <target name="buildinfo" description="create buildinfo properties">

    <!-- 2do : add a "hg status" summary -->

    <exec executable="hg" outputproperty="hg.tip.id" failifexecutionfails="false">
      <arg value="tip"/>
      <arg value="--template"/>
      <arg value="{rev}:{node|short}\n"/>
    </exec>
    <exec executable="hg" outputproperty="hg.author" failifexecutionfails="false">
      <arg value="tip"/>
      <arg value="--template"/>
      <arg value="{author}\n"/>
    </exec>
    <exec executable="hg" outputproperty="hg.tip.date" failifexecutionfails="false">
      <arg value="tip"/>
      <arg value="--template"/>
      <arg value="{date|isodate}\n"/>
    </exec>
    <exec executable="hg" outputproperty="hg.paths.default" failifexecutionfails="false">
      <arg value="showconfig"/>
      <arg value="paths.default"/>
    </exec>
    <exec executable="hostname" osfamily="unix" failifexecutionfails="false" outputproperty="env.COMPUTERNAME"/>
    <property name="hostname" value="${env.COMPUTERNAME}"/>  <!-- Windows doesn't have hostname -->

    <!-- it seems the 'propertyfile' task just appends -->
    <delete file="build.properties"/>

    <propertyfile file="build.properties" depends="build" comment="JPF core version info">
      <entry key="date.build" type="date" value="now"/>
      <entry key="date.tip" value="${hg.tip.date}"/>
      <entry key="author" value="${hg.author}"/>
      <entry key="revision" value="${hg.tip.id}"/>
      <entry key="host" value="${hostname}"/>
      <entry key="basedir" value="${basedir}"/>
      <entry key="upstream" value="${hg.paths.default}"/>
    </propertyfile>

  </target>

  <target name="dist" description="build binary distribution">
    <delete file="build/${ant.project.name}.zip"/>
    <!-- 2do this seems stupid - there needs to be a better way to re-base (zip basedir fails miserably) -->
    <zip destfile="build/${ant.project.name}.zip" update="false" excludes="*">
      <zipfileset file="jpf.properties"  prefix="${ant.project.name}"/>
      <zipfileset dir="lib"  prefix="${ant.project.name}/lib"/>
      <zipfileset dir="bin"  prefix="${ant.project.name}/bin"/>
      <zipfileset dir="build" includes="*.jar" prefix="${ant.project.name}/build"/>
    </zip>
  </target>

  <!-- ======================= TEST SECTION ================================ -->



  <target name="test" depends="build"
          description="run core regression tests" if="have_tests">

    <property name="junit.usefile" value="true"/>

    <junit printsummary="on" showoutput="off" haltonfailure="yes"
           fork="yes" forkmode="perTest" maxmemory="1024m" outputtoformatters="true">
      <formatter type="plain" usefile="${junit.usefile}"/>

      <assertions>
        <enable/>
      </assertions>

      <classpath>
        <path refid="lib.path"/>
        <pathelement location="build/tests"/>
        <pathelement location="build/classes"/>
        <pathelement location="build/annotations"/>
      </classpath>

      <batchtest todir="build/tests">
        <fileset dir="build/tests">
          <exclude name="**/JPF_*.class"/>
          <include name="**/*Test.class"/>
        </fileset>
      </batchtest>

    </junit>
   
  </target>

  
</project>
