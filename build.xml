<?xml version="1.0" ?>

<!--
  build.xml - the JPF core build script
              using Ant (http://jakarta.apache.org/ant)
  public targets:
    
    compile           compile JPF and its specific (modeled) environment libraries
    test              run all JPF tests
    jar               build JPF jar files
    dist              build binary distribution
    clean             remove the files that have been generated by the build process
-->

<project name="jpf-core" default="compile" basedir=".">

  <!-- ===================== ===== COMMON SECTION ========================== -->

  <!-- 
    local props have to come first, because Ant properties are immutable
    NOTE: this file is local - it is never in the repository!
  -->
  <property file="local.properties"/>



  <!-- compiler settings -->
  <property name="src_level"     value="6"/>
  <property name="debug"         value="on"/>
  <property name="deprecation"   value="on"/>

  <!-- generic classpath settings -->
  <path id="lib.path">
    <fileset dir=".">
  	  <include name="lib/*.jar"/>
    </fileset>
    <pathelement location="build/annotation"/>
    <pathelement location="build/jpf"/>
    <pathelement location="build/mji/peer"/>
  </path>

  <!-- init: common initialization -->
  <target name="-init">
    <tstamp/>

    <mkdir dir="build"/>
    <mkdir dir="build/annotation"/>
    <mkdir dir="build/jpf"/>
    <mkdir dir="build/mji/peer"/>
    <mkdir dir="build/mji/model"/>
    <mkdir dir="build/test"/>
    <mkdir dir="build/examples" />
    
    <!-- the things that have to be in the classpath of whatever runs Ant -->
    <available property="have_javac" classname="com.sun.tools.javac.Main"/>
    <fail unless="have_javac">no javac found</fail>
    
    

    <available file="src/annotation" type="dir" property="have_src_annotation"/>
    <available file="src/jpf" type="dir" property="have_src_jpf"/>
    <available file="src/mji/peer" type="dir" property="have_src_mji_peer"/>
    <available file="src/mji/model" type="dir" property="have_src_mji_model"/>
    <available file="test" type="dir" property="have_test"/>
    <available file="examples" type="dir" property="have_examples"/>

    <!-- for the core, it's a fail if any of these is missing -->

  </target>


  <!-- ======================= COMPILE SECTION ============================= -->
    
  <!-- public compile -->
  <target name="compile" depends="-init,-compile-annotation,-compile-jpf,-compile-mji-peer,-compile-mji-model,-compile-test,-compile-examples"
          description="compile all JPF core sources" >
  </target>

  <target name="-compile-annotation" if="have_src_annotation">
    <javac srcdir="src/annotation" destdir="build/annotation"
           debug="${debug}" source="${src_level}" deprecation="${deprecation}" classpath=""/>
  </target>

  <target name="-compile-jpf" if="have_src_jpf">
    <javac srcdir="src/jpf" destdir="build/jpf"
           debug="${debug}" source="${src_level}" deprecation="${deprecation}">
      <classpath>
        <path refid="lib.path"/>
        <fileset dir=".">
  	        <include name="tools/lib/junit*.jar"/>
        </fileset>
      </classpath>
    </javac>
	  <copy file="default.properties" todir="build/jpf/gov/nasa/jpf"/>
  </target>
  
  <target name="-compile-mji-peer" if="have_src_mji_peer">
    <javac srcdir="src/mji/peer" destdir="build/mji/peer"
           debug="${debug}" source="${src_level}" deprecation="${deprecation}" classpathref="lib.path"/>
  </target>
  
  <target name="-compile-mji-model" if="have_src_mji_model">
    <javac srcdir="src/mji/model" destdir="build/mji/model"
           debug="${debug}" source="${src_level}" deprecation="${deprecation}" classpathref="lib.path"/>
  </target>
  
  <target name="-compile-test" if="have_test">
    <javac srcdir="test" destdir="build/test"
           debug="${debug}" source="${src_level}" deprecation="${deprecation}" includes="gov/nasa/jpf/test/**">
      <classpath>
        <path refid="lib.path"/>
        <fileset dir=".">
  	        <include name="tools/lib/*.jar"/>
        </fileset>
      </classpath>
    </javac>
  </target>

  <target name="-compile-examples" if="have_examples">
    <javac srcdir="examples" destdir="build/examples"
           debug="${debug}" source="${src_level}" deprecation="${deprecation}" classpathref="lib.path"/>
  </target>

  
  <!-- ======================= MISC SECTION ================================ -->
  
  <!-- build jars -->
  <target name="jar" depends="compile"
        description="generate the core JPF jar files" >
    <mkdir dir="${dist.dir}"/>
    <jar jarfile="${dist.dir}/jpf.jar">
      <fileset dir="build/annotation"/>
      <fileset dir="build/jpf"/>
      <fileset dir="build/mji/peer"/>
    </jar>

    <jar jarfile="${dist.dir}/jpf_annotation.jar" basedir="build/annotation"/>
    <jar jarfile="${dist.dir}/jpf_mji_model.jar" basedir="build/mji/model"/>
  </target>
  
  <!-- binary distribution -->
  <target name="dist" depends="jar"
        description="pack together all required binaries" >
    <mkdir dir="${dist.dir}/arch"/>
  </target>
  
  <!-- public clean: cleanup from previous tasks/builds -->
  <target name="clean">
    <delete dir="build" />
    <delete dir="${dist.dir}" />
    <delete>
      <fileset dir="." includes="**/*~" defaultexcludes="no" />
      <fileset dir="." includes="**/*.bak" defaultexcludes="no" />
      <fileset dir="." includes="**/error.xml" />
    </delete>
  </target>
  


  <!-- ======================= TEST SECTION ================================ -->



  <target name="test" depends="compile"
          description="compile and run core regression tests" if="have_test">

    <property name="junit.usefile" value="true"/>

    <junit printsummary="on" showoutput="off" haltonfailure="yes" fork="yes" forkmode="perTest" maxmemory="1024m">
      <formatter type="plain" usefile="${junit.usefile}"/>

      <classpath>
        <path refid="lib.path"/>
        <pathelement location="build/test"/>
        <pathelement location="build/mji/model"/>

        <fileset dir=".">
  	      <include name="tools/lib/junit*.jar"/>
        </fileset>
      </classpath>

      <batchtest todir="build/test">
        <fileset dir="build/test">
          <exclude name="**/JPF_*.class"/>
          <include name="gov/nasa/jpf/test/basic/*Test.class"/>
          <include name="gov/nasa/jpf/test/vm/basic/*Test.class"/>
          <include name="gov/nasa/jpf/test/vm/reflection/*Test.class"/>
          <include name="gov/nasa/jpf/test/vm/threads/*Test.class"/>
        </fileset>
      </batchtest>

      <batchtest todir="build/test">
        <fileset dir="build/test">
          <exclude name="**/JPF_*.class"/>
          <include name="gov/nasa/jpf/test/mc/basic/*Test.class"/>
          <include name="gov/nasa/jpf/test/mc/threads/*Test.class"/>
          <include name="gov/nasa/jpf/test/mc/data/*Test.class"/>
        </fileset>
      </batchtest>

    </junit>
   
  </target>

  
</project>
